// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "cliSupportWorkspace.h"
#include <medViewContainer.h>
#include <medSingleViewContainer.h>
#include <medTabbedViewContainers.h>
#include <medViewPropertiesToolBox.h>
#include <medVisualizationLayoutToolBox.h>
#include <medTimeLineToolBox.h>
#include <cliSupportToolBox.h>

#include <dtkCore/dtkSmartPointer.h>
#include <dtkCore/dtkAbstractView.h>
#include <dtkCore/dtkAbstractViewFactory.h>
#include <dtkCore/dtkAbstractProcessFactory.h>

// /////////////////////////////////////////////////////////////////
// cliSupportWorkspacePrivate
// /////////////////////////////////////////////////////////////////

class cliSupportWorkspacePrivate
{
public:
    medToolBox         * layoutToolBox;
    medToolBox         * timeToolBox;
    medToolBox         * viewPropertiesToolBox;
    cliSupportToolBox  * cliToolBox;
};

// /////////////////////////////////////////////////////////////////
// cliSupportWorkspace
// /////////////////////////////////////////////////////////////////


cliSupportWorkspace::cliSupportWorkspace(QWidget *parent) : medWorkspace(parent), d(new cliSupportWorkspacePrivate)
{
    // -- Layout toolbox --
    d->layoutToolBox = new medVisualizationLayoutToolBox(parent);

    connect (d->layoutToolBox, SIGNAL(modeChanged(const QString&)),
             this,             SIGNAL(layoutModeChanged(const QString&)));
    connect (d->layoutToolBox, SIGNAL(presetClicked(int)),
             this,             SIGNAL(layoutPresetClicked(int)));
    connect (d->layoutToolBox, SIGNAL(split(int,int)),
             this,             SIGNAL(layoutSplit(int,int)));

    connect(this,SIGNAL(setLayoutTab(const QString &)), d->layoutToolBox, SLOT(setTab(const QString &)));

    this->addToolBox( d->layoutToolBox );

    // -- View toolbox --

    d->viewPropertiesToolBox = new medViewPropertiesToolBox(parent);
    d->timeToolBox           = new medTimeLineToolBox(parent);


    this->addToolBox( d->viewPropertiesToolBox );
    this->addToolBox( d->timeToolBox );

    connect ( this, SIGNAL(layoutModeChanged(const QString&)),
              d->timeToolBox, SLOT(onStopButton()));
    connect ( this, SIGNAL(layoutModeChanged(const QString &)),
              stackedViewContainers(), SLOT(changeCurrentContainerType(const QString &)));
    connect ( stackedViewContainers(), SIGNAL(currentChanged(const QString &)),
              this, SLOT(connectToolboxesToCurrentContainer(const QString &)));

    d->cliToolBox = new cliSupportToolBox(parent, this);
    this->addToolBox( d->cliToolBox );
}


cliSupportWorkspace::~cliSupportWorkspace(void)
{
    delete d;
    d = NULL;
}


void cliSupportWorkspace::setupViewContainerStack()
{
//    if (!stackedViewContainers()->count())
//    {
//        const QString description = this->description();
//        addDefaultTypeContainer(description);
//        this->connectToolboxesToCurrentContainer(description);
//    }
//    this->stackedViewContainers()->unlockTabs();

    //the stack has been instantiated in constructor
    if (!this->stackedViewContainers()->count())
    {
        medSingleViewContainer * cliSupportContainer = new medSingleViewContainer(this->stackedViewContainers());
        if (dtkSmartPointer<dtkAbstractView> view = dtkAbstractViewFactory::instance()->createSmartPointer("v3dView"))
        {
            cliSupportContainer->setView (view);
            d->cliToolBox->update(view.data());
        }

        this->stackedViewContainers()->addContainer("CLI Support", cliSupportContainer);
        this->stackedViewContainers()->lockTabs();
        setCurrentViewContainer("CLI Support");
    }
}


void cliSupportWorkspace::connectToolboxesToCurrentContainer(const QString &name)
{
    connect(stackedViewContainers()->container(name),
            SIGNAL(viewAdded(dtkAbstractView*)),
            d->timeToolBox, SLOT(onViewAdded(dtkAbstractView*)));
    connect(stackedViewContainers()->container(name),
            SIGNAL(viewRemoved(dtkAbstractView*)),
            d->timeToolBox, SLOT(onViewRemoved(dtkAbstractView*)));
}


QString cliSupportWorkspace::identifier()  const
{
    return "CLI Support";
}


QString cliSupportWorkspace::description() const
{
    return "CLI Support";
}
